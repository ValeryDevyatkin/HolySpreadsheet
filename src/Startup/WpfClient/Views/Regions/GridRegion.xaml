<UserControl x:Class = "WpfClient.Views.Regions.GridRegion"
             xmlns = "http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x = "http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc = "http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d = "http://schemas.microsoft.com/expression/blend/2008"
             xmlns:theme = "clr-namespace:WpfClient.Theme"
             xmlns:controls = "clr-namespace:WpfClient.Views.Controls"
             xmlns:converters = "clr-namespace:WpfClient.Wpf.Converters"
             xmlns:viewModels = "clr-namespace:ViewModels.Main;assembly=ViewModels"
             xmlns:enums = "clr-namespace:Common.Enums;assembly=Common"
             mc:Ignorable = "d"
             x:ClassModifier = "internal"
             x:Name = "Root">

    <d:Control.DataContext>
        <viewModels:MainViewModel />
    </d:Control.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height = "Auto" />
            <RowDefinition Height = "{x:Static theme:UiSizes.InnerSpacingGridLength}" />
            <RowDefinition Height = "Auto" />
            <RowDefinition Height = "{x:Static theme:UiSizes.InnerSpacingGridLength}" />
            <RowDefinition Height = "Auto" />
            <RowDefinition Height = "{x:Static theme:UiSizes.InnerSpacingGridLength}" />
            <RowDefinition Height = "Auto" />
            <RowDefinition Height = "{x:Static theme:UiSizes.InnerSpacingGridLength}" />
            <RowDefinition Height = "*" />
        </Grid.RowDefinitions>

        <TextBlock Grid.Row = "0"
                   Style = "{StaticResource HeaderTextBlockStyle}"
                   Text = "Grid" />

        <StackPanel Grid.Row = "2">
            <GroupBox Header = "Delimiter:">
                <controls:EnumRadioGroup GroupValue = "{Binding Delimiter, Mode=TwoWay}" />
            </GroupBox>

            <GroupBox Header = "Custom Delimiter:">
                <GroupBox.Style>
                    <Style TargetType = "GroupBox"
                           BasedOn = "{StaticResource {x:Type GroupBox}}">
                        <Setter Property = "Visibility"
                                Value = "Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding = "{Binding Delimiter, Mode=OneWay}"
                                         Value = "{x:Static enums:DelimiterEnum.Custom}">
                                <Setter Property = "Visibility"
                                        Value = "Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </GroupBox.Style>
                <TextBox Text = "{Binding CustomDelimiter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            </GroupBox>
        </StackPanel>

        <StackPanel Grid.Row = "4">
            <GroupBox Header = "Pull in line:"
                      Width="90"
                      HorizontalAlignment="Left"
                      ToolTip="Pull all the rows into a single line and remove empty entries.">
                <CheckBox IsChecked = "{Binding ShouldPullInLine, Mode=TwoWay}" />
            </GroupBox>
        </StackPanel>
        
        <Button Grid.Row = "6"
                Content = "Process"
                Background = "{StaticResource ProcessButtonBackgroundBrush}"
                Command = "{Binding ProcessInputCommand, Mode=OneTime}">

            <Button.Style>
                <Style TargetType = "Button"
                       BasedOn = "{StaticResource {x:Type Button}}">
                    <Style.Triggers>
                        <DataTrigger
                            Binding = "{Binding InputText, Mode=OneWay, Converter={converters:EmptyOrWhitespaceStringToBoolConverter}}"
                            Value = "False">
                            <Setter Property = "IsEnabled"
                                    Value = "False" />
                            <Setter Property = "ToolTip"
                                    Value = "Input should not be empty." />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <DataGrid Grid.Row = "8"
                  x:Name = "DataGrid"
                  HeadersVisibility = "Column"
                  AutoGenerateColumns = "True"
                  CanUserAddRows = "False"
                  CanUserDeleteRows = "False"
                  CanUserSortColumns = "False"
                  CanUserReorderColumns = "True"
                  CanUserResizeRows = "False"
                  CanUserResizeColumns = "True"
                  HorizontalScrollBarVisibility = "Auto"
                  VerticalScrollBarVisibility = "Auto"
                  IsReadOnly = "True"
                  ColumnWidth = "*">
            <DataGrid.Resources>
                <Style TargetType = "DataGridCell"
                       BasedOn = "{StaticResource {x:Type FrameworkElement}}">
                    <Style.Triggers>
                        <DataTrigger
                            Binding = "{Binding RelativeSource={RelativeSource Self}, 
                                       Path=Content.Text}"
                            Value = "">
                            <Setter Property = "Background"
                                    Value = "{StaticResource AlertBrush}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>
            <DataGrid.RowStyle>
                <Style TargetType = "DataGridRow">
                    <Setter Property = "IsHitTestVisible"
                            Value = "False" />
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.ColumnHeaderStyle>
                <Style TargetType = "DataGridColumnHeader">
                    <Setter Property = "Padding"
                            Value = "0" />
                    <Setter Property = "VerticalContentAlignment"
                            Value = "Stretch" />
                    <Setter Property = "HorizontalContentAlignment"
                            Value = "Stretch" />
                    <Setter Property = "Template">
                        <Setter.Value>
                            <ControlTemplate TargetType = "DataGridColumnHeader">
                                <Grid x:Name = "Grid">
                                    <d:Grid.DataContext>
                                        <controls:CustomDataGridTextColumn />
                                    </d:Grid.DataContext>
                                    <Grid.DataContext>
                                        <MultiBinding Converter = "{converters:DataGridColumnHeaderContextConverter}">
                                            <Binding RelativeSource = "{RelativeSource AncestorType=DataGrid}" />
                                            <Binding />
                                        </MultiBinding>
                                    </Grid.DataContext>
                                    <Grid.Resources>
                                        <ContextMenu x:Key = "ContextMenu">
                                            <MenuItem Command = "{Binding SwitchDeactivatedCommand, Mode=OneTime}">
                                                <MenuItem.Style>
                                                    <Style TargetType = "MenuItem">
                                                        <Setter Property = "Header"
                                                                Value = "Deactivate" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding = "{Binding IsDeactivated}"
                                                                         Value = "True">
                                                                <Setter Property = "Header"
                                                                        Value = "Activate" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </MenuItem.Style>
                                            </MenuItem>
                                            <MenuItem
                                                Command = "{Binding SwitchFormattingDeactivatedCommand, Mode=OneTime}">
                                                <MenuItem.Style>
                                                    <Style TargetType = "MenuItem">
                                                        <Setter Property = "Header"
                                                                Value = "Disable cell wrapping" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding = "{Binding IsDeactivated}"
                                                                         Value = "True">
                                                                <Setter Property = "IsEnabled"
                                                                        Value = "False" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding = "{Binding IsFormattingDeactivated}"
                                                                         Value = "True">
                                                                <Setter Property = "Header"
                                                                        Value = "Enable cell wrapping" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </MenuItem.Style>
                                            </MenuItem>
                                        </ContextMenu>
                                    </Grid.Resources>
                                    <Grid.ContextMenu>
                                        <StaticResource ResourceKey = "ContextMenu" />
                                    </Grid.ContextMenu>
                                    <Grid.Style>
                                        <Style TargetType = "Grid">
                                            <Setter Property = "Background"
                                                    Value = "Transparent" />
                                            <Style.Triggers>
                                                <DataTrigger Binding = "{Binding IsDeactivated}"
                                                             Value = "True">
                                                    <Setter Property = "Background"
                                                            Value = "{StaticResource GridSplitterBrush}" />
                                                </DataTrigger>
                                                <DataTrigger Binding = "{Binding IsFormattingDeactivated}"
                                                             Value = "True">
                                                    <Setter Property = "Background"
                                                            Value = "{StaticResource OrangeBrush}" />
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding = "{Binding IsDeactivated}"
                                                                   Value = "False" />
                                                        <Condition
                                                            Binding = "{Binding ElementName=Grid, Path=IsMouseOver}"
                                                            Value = "True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property = "Background"
                                                                Value = "{StaticResource HoverBrush}" />
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>

                                    <ContentPresenter HorizontalAlignment = "Center"
                                                      VerticalAlignment = "Center" />

                                    <Thumb x:Name = "PART_RightHeaderGripper"
                                           HorizontalAlignment = "Right"
                                           Cursor = "SizeWE">
                                        <Thumb.Style>
                                            <Style TargetType = "Thumb">
                                                <Setter Property = "Background"
                                                        Value = "Transparent" />
                                                <Style.Triggers>
                                                    <Trigger Property = "IsMouseOver"
                                                             Value = "True">
                                                        <Setter Property = "Background"
                                                                Value = "{StaticResource BlackBrush}" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Thumb.Style>
                                        <Thumb.Template>
                                            <ControlTemplate TargetType = "Thumb">
                                                <Grid Background = "{TemplateBinding Background}"
                                                      Width = "2" />
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataGrid.ColumnHeaderStyle>
        </DataGrid>

        <StackPanel Grid.Row = "10"
                    Orientation = "Horizontal"
                    VerticalAlignment = "Bottom"
                    HorizontalAlignment = "Right">
            <StackPanel.Style>
                <Style TargetType = "StackPanel">
                    <Style.Triggers>
                        <DataTrigger Binding = "{Binding GridRowCount, Mode=OneWay}"
                                     Value = "0">
                            <Setter Property = "Visibility"
                                    Value = "Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>

            <TextBlock FontWeight = "Bold"
                       VerticalAlignment = "Bottom"
                       Background = "{StaticResource ButtonBackgroundBrush}"
                       Padding = "{x:Static theme:UiSizes.InnerSpacingThickness}">
                <TextBlock.Text>
                    <MultiBinding StringFormat="{}Rows: {0}, Columns: {1}">
                        <Binding Path="GridRowCount" Mode="OneWay" />
                        <Binding Path="GridColumnCount" Mode="OneWay" />
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>

            <Button Command = "{Binding ActivateAllColumnsCommand, Mode=OneTime}">
                <Button.Style>
                    <Style TargetType = "Button"
                           BasedOn = "{StaticResource ClearButtonStyle}">
                        <Setter Property = "ToolTip"
                                Value = "Activate all columns" />
                        <Setter Property = "Content">
                            <Setter.Value>
                                <Image Source = "{StaticResource LightOnIcon}" />
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>

            <Button Command = "{Binding DeactivateAllColumnsCommand, Mode=OneTime}">
                <Button.Style>
                    <Style TargetType = "Button"
                           BasedOn = "{StaticResource ClearButtonStyle}">
                        <Setter Property = "ToolTip"
                                Value = "Deactivate all columns" />
                        <Setter Property = "Content">
                            <Setter.Value>
                                <Image Source = "{StaticResource LightOffIcon}" />
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>

            <Button Command = "{Binding ClearGridCommand, Mode=OneTime}"
                    Style = "{StaticResource ClearButtonStyle}">
                <Image Source = "{StaticResource ClearIcon}" />
            </Button>
        </StackPanel>
    </Grid>

</UserControl>